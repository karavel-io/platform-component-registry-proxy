apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "registry-proxy.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "registry-proxy.name" . }}
    {{- include "registry-proxy.labels" . | nindent 4 }}
  {{ with .Values.s3.iamRole }}
  annotations:
    iam.amazonaws.com/role: {{ . }}
  {{ end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "registry-proxy.name" . }}
      {{- include "registry-proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "registry-proxy.name" . }}
        {{- include "registry-proxy.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "registry-proxy.name" . }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: registry-proxy
          image: "public.ecr.aws/docker/library/registry:{{ .Values.registryProxy.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 20Mi
          volumes:
            {{- if ne .Values.store "filesystem" }}
            - name: storage
              emptyDir: {}
            {{- end }}
          {{- with .Values.secret }}
          envFrom:
            - secretRef:
                name: {{ include "registry-proxy.name" $ }}-secrets
                optional: true
          {{- end }}
          env:
          {{- if eq .Values.store "filesystem" }}
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          {{- else if eq .Values.store "s3" }}
            - name: REGISTRY_STORAGE_S3_REGION
              value: {{ required ".Values.s3.region is required" .Values.s3.region }}
          {{- if .Values.s3.endpoint }}
            - name: REGISTRY_STORAGE_S3_REGIONENDPOINT
              value: {{ .Values.s3.endpoint }}
          {{- end }}
            - name: REGISTRY_STORAGE_S3_BUCKET
              value: {{ required ".Values.s3.bucket is required" .Values.s3.bucket }}
          {{- if .Values.s3.prefix }}
            - name: REGISTRY_STORAGE_S3_ROOTDIRECTORY
              value: {{ .Values.s3.prefix | quote }}
          {{- end }}
          {{- if .Values.s3.encrypt }}
            - name: REGISTRY_STORAGE_S3_ENCRYPT
              value: {{ .Values.s3.encrypt | quote }}
          {{- end }}
          {{- if .Values.s3.secure }}
            - name: REGISTRY_STORAGE_S3_SECURE
              value: {{ .Values.s3.secure | quote }}
          {{- end }}
          {{- if .Values.s3.skipverify }}
            - name: REGISTRY_STORAGE_S3_SKIPVERIFY
              value: {{ .Values.s3.skipverify | quote }}
          {{- end }}
          {{- end }}
            - name: REGISTRY_PROXY_REMOTEURL
              value: {{ required ".Values.proxy.remoteurl is required" .Values.proxy.remoteurl }}
